import * as fs from 'fs';
import * as path from 'path';
import { AssetsConfig } from './config';

export function generateAssets(options: AssetsConfig) {
  const alwaysIgnore = ["2.0x", "3.0x", "Mx", "Nx"];
  const { rootPath, assetsDirs, outputFile, className, pathIgnore } = options;

  console.log('Starting asset generation with options:', JSON.stringify(options, null, 2));

  if (assetsDirs.length === 0) {
    console.error(`No assets directories found in pubspec.yaml`);
    return;
  }

  const files: string[] = [];

  function walk(rootPath: string, dir: string) {
    for (const file of fs.readdirSync(dir)) {
      // 忽略隐藏文件和系统文件
      if (file.startsWith('.')) {
        continue;
      }

      const filepath = path.join(dir, file);

      // 检查是否在忽略路径中
      if (alwaysIgnore.includes(file) || pathIgnore.includes(file)) {
        continue;
      }

      if (fs.statSync(filepath).isDirectory()) {
        walk(rootPath, filepath);
      } else {
        const relativePath = path.relative(rootPath, filepath);
        const assetPath = relativePath.split(path.sep).join('/');
        files.push(assetPath);
      }
    }
  }

  assetsDirs.forEach(assetsDir => {
    if (!fs.existsSync(assetsDir)) {
      console.error(`Assets directory not found: ${assetsDir}`);
      return;
    }
    console.log(`Assets directory found: ${assetsDir}`);
    walk(rootPath, assetsDir);
  });

  console.log(`Found ${files.length} asset files`);

  const lines: string[] = [];
  lines.push('///This file is automatically generated. DO NOT EDIT, all your changes would be lost.');
  lines.push(`class ${className} {`);
  lines.push('  Assets._();');
  lines.push('');

  const usedNames = new Set<string>();
  files.forEach(file => {
    const pathWithoutExt = file.substring(0, file.lastIndexOf('.'));
    let name: string;

    // 移除开头的 'assets/' 并分割路径
    const cleanPath = pathWithoutExt.replace(/^assets\//, '');
    const parts = cleanPath.split('/');

    // 生成变量名
    name = parts
      .map((part, index) => {
        // 按照配置的分隔符分割单词
        const words = part.split('_');
        return words.map((word, wordIndex) => {
          word = word.replace(/[^\w\s]/g, '');
          // 如果是第一个部分的第一个单词，首字母小写；其他情况首字母大写
          if (index === 0 && wordIndex === 0) {
            return word.charAt(0).toLowerCase() + word.slice(1);
          }
          return word.charAt(0).toUpperCase() + word.slice(1);
        }).join('');
      })
      .join('');

    // 如果名称已存在，添加数字后缀
    let uniqueName = name;
    let counter = 1;
    while (usedNames.has(uniqueName)) {
      uniqueName = `${name}${counter}`;
      counter++;
    }
    usedNames.add(uniqueName);

    lines.push(`  static const String ${uniqueName} = '${file}';`);
  });
  lines.push('');
  lines.push('}');
  lines.push('');

  fs.mkdirSync(path.dirname(outputFile), { recursive: true });
  fs.writeFileSync(outputFile, lines.join('\n'));
  console.log(`Assets generated at ${outputFile}`);
}